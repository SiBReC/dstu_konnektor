import os
import sys
import re
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, simpledialog
from datetime import datetime
from openpyxl import load_workbook, Workbook
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
import subprocess
import platform
import webbrowser
import shutil
import random


def resource_path(relative_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)


class ExcelMergerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–±–æ—Ä–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –î–ì–¢–£ –ò–∏–í–¢")
        self.files = []
        self.download_dir = os.path.join(os.getcwd(), "dstu_connector_files")
        self.remaining = 10
        os.makedirs(self.download_dir, exist_ok=True)

        self.setup_ui()
        self.create_widgets()
        self.set_icon()

    def set_icon(self):
        try:
            self.icon = resource_path("icon.ico")
            self.root.iconbitmap(self.icon)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {e}")

    def setup_ui(self):
        style = ttk.Style()
        style.theme_use('clam')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
        self.root.configure(bg='#f0f0f0')
        style.configure('TFrame', background='#f0f0f0')
        style.configure('TLabel', background='#f0f0f0', font=('Arial', 10))
        style.configure('TButton', font=('Arial', 10), padding=8,
                        background='#4a7a8c', foreground='white')
        style.map('TButton',
                  background=[('active', '#5a8a9c'), ('pressed', '#3a6a7c')])

        style.configure('Title.TLabel', font=('Arial', 14, 'bold'),
                        foreground='#2d5b6c')
        style.configure('Listbox', font=('Arial', 10), background='white')
        style.configure('Horizontal.TProgressbar', troughcolor='#e0e0e0',
                        background='#4a7a8c', thickness=20)
        style.configure('TLabelframe', background='#f0f0f0', relief='groove')
        style.configure('TLabelframe.Label', background='#f0f0f0',
                        foreground='#2d5b6c')

    def create_widgets(self):
        main_frame = ttk.Frame(self.root, padding=(15, 10))
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(title_frame, text="–°–±–æ—Ä–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –î–ì–¢–£ –ò–∏–í–¢",
                  style='Title.TLabel').pack(side=tk.LEFT)

        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        list_frame = ttk.LabelFrame(main_frame, text=" –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ", padding=10)
        list_frame.pack(fill=tk.BOTH, expand=True, pady=5)

        self.file_list = tk.Listbox(list_frame, width=60, height=10,
                                    selectmode=tk.EXTENDED, font=('Arial', 10),
                                    relief='flat', highlightthickness=1,
                                    bg='white', activestyle='none')
        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL,
                                  command=self.file_list.yview)
        self.file_list.configure(yscrollcommand=scrollbar.set)

        self.file_list.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=10)

        buttons = [
            ("üìÅ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", self.add_files),
            ("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", self.clear_list),
            ("üîÑ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å", self.merge_files),
            ("üåê –û–Ω–ª–∞–π–Ω-–≤—ã–≥—Ä—É–∑–∫–∞(BETA)", self.online_export),
            ("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", self.show_instructions)
        ]

        for text, command in buttons:
            btn = ttk.Button(btn_frame, text=text, command=command,
                             style='TButton')
            btn.pack(side=tk.LEFT, padx=3, ipadx=5, ipady=3)

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å
        status_frame = ttk.Frame(main_frame)
        status_frame.pack(fill=tk.X, pady=(5, 0))

        self.progress = ttk.Progressbar(status_frame, orient=tk.HORIZONTAL,
                                        mode='determinate',
                                        style='Horizontal.TProgressbar')
        self.status_label = ttk.Label(status_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                                      font=('Arial', 9), foreground='#555555')
        self.status_label.pack(side=tk.LEFT)
        self.progress.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(10, 0))

    def add_files(self):
        new_files = filedialog.askopenfilenames(
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
        )
        if new_files:
            self.files.extend(sorted(new_files))
            self.update_file_list()
            self.status_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.files)}")

    def clear_list(self):
        self.files = []
        self.file_list.delete(0, tk.END)
        self.status_label.config(text="–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")

    def show_disclaimer(self):
        disclaimer_window = tk.Toplevel(self.root)
        disclaimer_window.title("–í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        disclaimer_window.configure(bg='#f0f0f0')
        self.set_child_icon(disclaimer_window)

        text_frame = ttk.Frame(disclaimer_window, padding=10)
        text_frame.pack(fill=tk.BOTH, expand=True)

        text = tk.Text(text_frame, wrap=tk.WORD, width=60, height=10,
                       font=('Arial', 10), bg='white', relief='flat')
        scrollbar = ttk.Scrollbar(text_frame, command=text.yview)
        text.configure(yscrollcommand=scrollbar.set)

        text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        disclaimer_text = (
            "–í–ù–ò–ú–ê–ù–ò–ï!\n\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, "
            "–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∏–∫–æ–º—É, "
            "–∫—Ä–æ–º–µ —Å–∞–π—Ç–∞ https://edu.donstu.ru. –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã "
            "—Ç–æ–ª—å–∫–æ –í–∞–º –∏ —ç—Ç–æ–º—É —Å–∞–π—Ç—É. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å "
            "–≤ –æ–∫–Ω–µ '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è'.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ BETA —Ñ—É–Ω–∫—Ü–∏–π –ù–ï –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞!\n"
            "–õ—é–±–∞—è –æ—à–∏–±–∫–∞ BETA(—Ñ—É–Ω–∫—Ü–∏–π) —Ñ–∏–∫—Å–∏—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"
        )
        text.insert(tk.END, disclaimer_text)
        text.config(state=tk.DISABLED)

        btn_frame = ttk.Frame(disclaimer_window)
        btn_frame.pack(pady=10)

        ttk.Button(btn_frame, text="–Ø –ø–æ–Ω–∏–º–∞—é", style='TButton',
                   command=lambda: [disclaimer_window.destroy(), self.show_auth_window()]
                   ).pack()

    def show_auth_window(self):
        auth_window = tk.Toplevel(self.root)
        auth_window.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –î–ì–¢–£")
        auth_window.resizable(False, False)
        auth_window.configure(bg='#f0f0f0')
        self.set_child_icon(auth_window)

        form_frame = ttk.Frame(auth_window, padding=15)
        form_frame.pack()

        ttk.Label(form_frame, text="–õ–æ–≥–∏–Ω:").grid(row=0, column=0, padx=5, pady=5)
        self.login_entry = ttk.Entry(form_frame, width=25, font=('Arial', 10))
        self.login_entry.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(form_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=1, column=0, padx=5, pady=5)
        self.password_entry = ttk.Entry(form_frame, show="*", width=25, font=('Arial', 10))
        self.password_entry.grid(row=1, column=1, padx=5, pady=5)

        ttk.Button(form_frame, text="–ù–∞—á–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É", style='TButton',
                   command=self.start_online_export).grid(row=2, columnspan=2, pady=15)

    def check_chrome_installed(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Google Chrome –≤ —Å–∏—Å—Ç–µ–º–µ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ shutil.which
        chrome_names = ['google-chrome', 'chrome', 'google-chrome-stable', 'chromium']
        for name in chrome_names:
            if shutil.which(name):
                return True

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –û–°
        system = platform.system()
        if system == "Windows":
            common_paths = [
                os.path.expandvars(r"%ProgramFiles%\Google\Chrome\Application\chrome.exe"),
                os.path.expandvars(r"%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe"),
                os.path.expandvars(r"%LocalAppData%\Google\Chrome\Application\chrome.exe")
            ]
            for path in common_paths:
                if os.path.exists(path):
                    return True

        elif system == "Darwin":
            mac_paths = [
                "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
                "/Applications/Chromium.app/Contents/MacOS/Chromium"
            ]
            for path in mac_paths:
                if os.path.exists(path):
                    return True

        elif system == "Linux":
            linux_paths = [
                "/usr/bin/google-chrome",
                "/usr/local/bin/google-chrome",
                "/opt/google/chrome/chrome",
                "/snap/bin/chromium"
            ]
            for path in linux_paths:
                if os.path.exists(path):
                    return True

        return False

    def show_chrome_install_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome"""
        msg = (
            "–î–ª—è —Ä–∞–±–æ—Ç—ã –æ–Ω–ª–∞–π–Ω-–≤—ã–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è Google Chrome.\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å?"
        )
        answer = messagebox.askyesno(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
            msg,
            parent=self.root
        )

        if answer:
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏ Chrome
                webbrowser.open("https://www.google.ru/chrome/")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                retry_answer = messagebox.askyesno(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
                    "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome –Ω–∞–∂–º–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏",
                    parent=self.root
                )
                if retry_answer:
                    return self.check_chrome_installed()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False

    def online_export(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–≤—ã–≥—Ä—É–∑–∫–∏"""
        if not self.check_chrome_installed():
            if not self.show_chrome_install_dialog():
                messagebox.showinfo(
                    "–û—Ç–º–µ–Ω–∞",
                    "–û–Ω–ª–∞–π–Ω-–≤—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ Google Chrome",
                    parent=self.root
                )
                return
        self.show_disclaimer()

    def start_online_export(self):

        login = self.login_entry.get()
        password = self.password_entry.get()

        if not login or not password:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!")
            return

        driver = None
        try:
            self.clean_downloads_folder()

            options = webdriver.ChromeOptions()
            prefs = {
                "download.default_directory": self.download_dir,
                "download.prompt_for_download": False,
                "download.directory_upgrade": True,
                "safebrowsing.enabled": True
            }
            options.add_experimental_option("prefs", prefs)
            options.add_argument("--disable-gpu")
            options.add_argument("--no-sandbox")

            self.status_label.config(text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
            self.progress.pack(pady=5)

            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=options)
            driver.set_page_load_timeout(30)

            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            self.status_label.config(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ...")
            driver.get("https://edu.donstu.ru/WebApp/#/login")

            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.NAME, "login"))
            ).send_keys(login)

            driver.find_element(By.NAME, "password").send_keys(password)
            driver.find_element(By.CSS_SELECTOR, "button.stud").click()

            try:
                WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".v-main__wrap")))
                self.status_label.config(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                self.progress['value'] = 25
            except TimeoutException:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return

            # –°–±–æ—Ä –∂—É—Ä–Ω–∞–ª–æ–≤
            # –°–±–æ—Ä –∂—É—Ä–Ω–∞–ª–æ–≤
            self.status_label.config(text="–ü–æ–∏—Å–∫ –∂—É—Ä–Ω–∞–ª–æ–≤...")
            try:
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                def is_page_loaded(driver):
                    return driver.execute_script("return document.readyState") == "complete"

                # –û—á–∏—Å—Ç–∫–∞ –∫—É–∫ –∏ –∫—ç—à–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
                driver.delete_all_cookies()

                # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        driver.get("https://edu.donstu.ru/WebApp/#/Journals/JournalList")
                        # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–µ "–í—Å–µ"
                        WebDriverWait(driver, 15).until(
                            EC.presence_of_element_located((By.XPATH, "//div[@role='tab' and contains(., '–í—Å–µ')]"))
                        ).click()
                        time.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                        WebDriverWait(driver, 15).until(
                            lambda d: is_page_loaded(d) and
                                      d.find_elements(By.CSS_SELECTOR, "a[href^='#/Journals/Journal/']")
                        )
                        break
                    except TimeoutException:
                        if attempt == max_retries - 1:
                            raise
                        driver.refresh()
                        time.sleep(2)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                if "JournalList" not in driver.current_url:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é")

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                time.sleep(random.uniform(0.5, 1.5))

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ CAPTCHA –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" in driver.page_source:
                    raise Exception("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞")

            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                try:
                    subprocess.check_call(["ping", "-c", "1", "8.8.8.8"])
                except subprocess.CalledProcessError:
                    error_msg += "\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"

                messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_msg)
                return


            journals = driver.find_elements(By.CSS_SELECTOR, "a[href^='#/Journals/Journal/']")
            journal_urls = list({j.get_attribute("href") for j in journals})

            if not journal_urls:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏")
                return

            total = len(journal_urls)
            self.progress['maximum'] = total

            for idx, url in enumerate(journal_urls, 1):
                try:
                    self.status_label.config(text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ {idx}/{total}")
                    driver.get(url)
                    time.sleep(2)

                    export_btn = WebDriverWait(driver, 15).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, ".dx-icon-export-excel-button"))
                    )
                    export_btn.click()
                    time.sleep(3)
                    self.progress['value'] = idx

                except Exception as e:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
                    continue

            self.add_files_from_downloads()
            self.remaining = 10
            self.update_timer()

        except Exception as e:
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            if driver is not None:
                driver.quit()
            self.progress.pack_forget()

    def update_timer(self):
        if self.remaining > 0:
            self.status_label.config(
                text=f"–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è... {self.remaining} —Å–µ–∫."
            )
            self.remaining -= 1
            self.root.after(1000, self.update_timer)
        else:
            self.merge_files()

    def clean_downloads_folder(self):
        for filename in os.listdir(self.download_dir):
            file_path = os.path.join(self.download_dir, filename)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

    def add_files_from_downloads(self):
        try:
            new_files = [os.path.join(self.download_dir, f)
                         for f in os.listdir(self.download_dir)
                         if f.endswith('.xlsx')]

            if not new_files:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ Excel-—Ñ–∞–π–ª–æ–≤")
                return

            self.files = sorted(new_files)
            self.update_file_list()
            self.status_label.config(text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_files)} —Ñ–∞–π–ª–æ–≤")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")

    def merge_files(self):
        if not self.files:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
            return

        save_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            title="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
        )

        if not save_path:
            return

        try:
            new_wb = Workbook()
            new_wb.properties.creator = "DSTU_–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä"
            if new_wb.sheetnames:
                new_wb.remove(new_wb.active)

            for file_path in sorted(self.files):
                try:
                    wb = load_workbook(file_path, data_only=False)
                    ws = wb.worksheets[0]
                    original_name = os.path.basename(file_path)
                    sheet_name = self.process_sheet_name(original_name)

                    unique_name = sheet_name
                    counter = 1
                    while unique_name in new_wb.sheetnames:
                        unique_name = f"{sheet_name}_{counter}"
                        if len(unique_name) > 31:
                            max_base_length = 31 - len(str(counter)) - 1
                            unique_name = f"{sheet_name[:max_base_length]}_{counter}"
                        counter += 1

                    new_ws = new_wb.create_sheet(title=unique_name)

                    for row in ws.iter_rows():
                        for cell in row:
                            new_cell = new_ws.cell(
                                row=cell.row,
                                column=cell.column,
                                value=cell.value
                            )
                            if cell.has_style:
                                new_cell.font = cell.font.copy()
                                new_cell.border = cell.border.copy()
                                new_cell.fill = cell.fill.copy()
                                new_cell.number_format = cell.number_format
                                new_cell.protection = cell.protection.copy()
                                new_cell.alignment = cell.alignment.copy()

                    for merged_range in ws.merged_cells.ranges:
                        new_ws.merge_cells(str(merged_range))

                    for col in ws.column_dimensions:
                        new_ws.column_dimensions[col].width = ws.column_dimensions[col].width

                    for row in ws.row_dimensions:
                        new_ws.row_dimensions[row].height = ws.row_dimensions[row].height

                    wb.close()
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}:\n{str(e)}")
                    continue

            new_wb.save(save_path)
            new_wb.close()
            self.status_label.config(text="–ì–æ—Ç–æ–≤–æ")
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤:\n{save_path}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")

    def process_sheet_name(self, filename):
        name = os.path.splitext(filename)[0]
        name = re.sub(r'(?i)–∂—É—Ä–Ω–∞–ª|[()]', '', name)
        name = re.sub(r'\s*,\s*', ',', name)
        name = re.sub(r',+', ',', name)

        for pattern in ["–õ–∞–±,", "–õ–µ–∫,", "–ü—Ä,"]:
            if pattern in name:
                name = name.split(pattern, 1)[0] + pattern.rstrip(',')
                break

        parts = re.split(r'[\s_,]+', name)
        processed = []
        for part in parts:
            if not part:
                continue
            if part.lower() == '–ø_–≥':
                processed.append('–ø_–≥')
                continue
            trunc_len = 5 if len(part) > 10 else 3
            processed.append(part[:trunc_len])

        clean_name = '_'.join(processed)
        clean_name = re.sub(r'[\\/*?[\]:,.]', '_', clean_name)
        clean_name = re.sub(r'_+', '_', clean_name).strip('_')

        return clean_name[:31]

    def update_file_list(self):
        self.file_list.delete(0, tk.END)
        for file in self.files:
            self.file_list.insert(tk.END, os.path.basename(file))

    def show_instructions(self):
        instructions_window = tk.Toplevel(self.root)
        instructions_window.title("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        instructions_window.configure(bg='#f0f0f0')
        self.set_child_icon(instructions_window)

        text_frame = ttk.Frame(instructions_window, padding=10)
        text_frame.pack(fill=tk.BOTH, expand=True)

        text = tk.Text(text_frame, wrap=tk.WORD, width=60, height=15,
                       font=('Arial', 10), bg='white', relief='flat')
        scrollbar = ttk.Scrollbar(text_frame, command=text.yview)
        text.configure(yscrollcommand=scrollbar.set)

        text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        instructions_text = (
            "1) –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
            "   - –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª—ã\n"
            "   - –ù–∞–∂–º–∏—Ç–µ '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
            "2) –î–ª—è –æ–Ω–ª–∞–π–Ω-–≤—ã–≥—Ä—É–∑–∫–∏:\n"
            "   - –ù–∞–∂–º–∏—Ç–µ '–û–Ω–ª–∞–π–Ω-–≤—ã–≥—Ä—É–∑–∫–∞'\n"
            "   - –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –æ—Ç edu.donstu.ru\n"
            "   - –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∂–∏–¥–∞–π—Ç–µ 10 —Å–µ–∫—É–Ω–¥\n"
            "   - –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞\n\n"
            "3) –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ - –∫–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫'\n\n"
            "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HASH –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\n"
            "https://disk.yandex.ru/i/FMvuS8UOpkmUSw\n"
            "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: 10.03.25 15:02 –ú–°–ö\n\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ tg:@FIRTUX\n–í–µ—Ä—Å–∏—è: v0.0.5-100325\n"
            "–ë—É–¥—É —Ä–∞–¥ –ª—é–±–æ–º—É –≤–∏–¥—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
            "–î–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ 01.09.2025\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ BETA —Ñ—É–Ω–∫—Ü–∏–π –ù–ï –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞!"
        )
        text.insert(tk.END, instructions_text)
        text.config(state=tk.DISABLED)

        btn_frame = ttk.Frame(instructions_window)
        btn_frame.pack(pady=10)
        ttk.Button(btn_frame, text="OK", style='TButton',
                   command=instructions_window.destroy).pack()

    def set_child_icon(self, window):
        try:
            window.iconbitmap(self.icon)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {e}")


def check_activation():
    current_date = datetime.now().date()
    cutoff_date = datetime(2025, 9, 1).date()
    if current_date >= cutoff_date:
        root = tk.Tk()
        root.withdraw()
        try:
            root.iconbitmap(resource_path("icon.ico"))
            root.iconbitmap(icon_path)
        except:
            pass
        key = simpledialog.askstring("–ê–∫—Ç–∏–≤–∞—Ü–∏—è", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –æ—Ç–ª–∞–¥–∫–∏:", show='*')
        if key != "*":
            root.destroy()
            return False
        root.destroy()
    return True


if __name__ == "__main__":
    if not check_activation():
        exit()
    root = tk.Tk()
    try:
        icon_path = resource_path("icon.ico")
        root.iconbitmap(icon_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {e}")
    app = ExcelMergerApp(root)
    root.mainloop()
